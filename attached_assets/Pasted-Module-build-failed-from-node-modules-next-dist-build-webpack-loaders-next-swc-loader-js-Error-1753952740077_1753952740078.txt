Module build failed (from ./node_modules/next/dist/build/webpack/loaders/next-swc-loader.js):
Error: 
  × the name `AuthService` is defined multiple times
     ╭─[/home/runner/workspace/frontend/src/lib/auth-service.ts:1:1]
   1 │ 
   2 │ import { AuthUser, AuthResponse, UserProfile, AuthenticationError } from '@/types/auth';
   3 │ 
   4 │ class AuthService {
     ·       ─────┬─────
     ·            ╰── previous definition of `AuthService` here
   5 │   private baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api/v1';
   6 │   private tokenKey = 'mlops_access_token';
   7 │   private refreshTokenKey = 'mlops_refresh_token';
   8 │ 
   9 │   // Token management
  10 │   setTokens(accessToken: string, refreshToken: string) {
  11 │     localStorage.setItem(this.tokenKey, accessToken);
  12 │     localStorage.setItem(this.refreshTokenKey, refreshToken);
  13 │   }
  14 │ 
  15 │   getAccessToken(): string | null {
  16 │     return localStorage.getItem(this.tokenKey);
  17 │   }
  18 │ 
  19 │   getRefreshToken(): string | null {
  20 │     return localStorage.getItem(this.refreshTokenKey);
  21 │   }
  22 │ 
  23 │   clearTokens() {
  24 │     localStorage.removeItem(this.tokenKey);
  25 │     localStorage.removeItem(this.refreshTokenKey);
  26 │   }
  27 │ 
  28 │   isAuthenticated(): boolean {
  29 │     return !!this.getAccessToken();
  30 │   }
  31 │ 
  32 │   // API methods
  33 │   async login(email: string, password: string): Promise {
  34 │     try {
  35 │       const response = await fetch(`${this.baseUrl}/auth/login`, {
  36 │         method: 'POST',
  37 │         headers: { 'Content-Type': 'application/json' },
  38 │         body: JSON.stringify({ email, password }),
  39 │       });
  40 │ 
  41 │       if (!response.ok) {
  42 │         const error = await response.json();
  43 │         throw new AuthenticationError(error.message || 'Login failed');
  44 │       }
  45 │ 
  46 │       const data = await response.json();
  47 │       this.setTokens(data.access_token, data.refresh_token);
  48 │       return data;
  49 │     } catch (error) {
  50 │       if (error instanceof AuthenticationError) throw error;
  51 │       throw new AuthenticationError('Network error during login');
  52 │     }
  53 │   }
  54 │ 
  55 │   async register(userData: {
  56 │     email: string;
  57 │     password: string;
  58 │     firstName: string;
  59 │     lastName: string;
  60 │     organizationName?: string;
  61 │   }): Promise {
  62 │     try {
  63 │       const response = await fetch(`${this.baseUrl}/auth/register`, {
  64 │         method: 'POST',
  65 │         headers: { 'Content-Type': 'application/json' },
  66 │         body: JSON.stringify(userData),
  67 │       });
  68 │ 
  69 │       if (!response.ok) {
  70 │         const error = await response.json();
  71 │         throw new AuthenticationError(error.message || 'Registration failed');
  72 │       }
  73 │ 
  74 │       const data = await response.json();
  75 │       this.setTokens(data.access_token, data.refresh_token);
  76 │       return data;
  77 │     } catch (error) {
  78 │       if (error instanceof AuthenticationError) throw error;
  79 │       throw new AuthenticationError('Network error during registration');
  80 │     }
  81 │   }
  82 │ 
  83 │   async logout(): Promise {
  84 │     try {
  85 │       const token = this.getAccessToken();
  86 │       if (token) {
  87 │         await fetch(`${this.baseUrl}/auth/logout`, {
  88 │           method: 'POST',
  89 │           headers: {
  90 │             'Authorization': `Bearer ${token}`,
  91 │             'Content-Type': 'application/json',
  92 │           },
  93 │         });
  94 │       }
  95 │     } catch (error) {
  96 │       console.warn('Logout API call failed:', error);
  97 │     } finally {
  98 │       this.clearTokens();
  99 │     }
 100 │   }
 101 │ 
 102 │   async getCurrentUser(): Promise {
 103 │     const token = this.getAccessToken();
 104 │     if (!token) {
 105 │       throw new AuthenticationError('No access token');
 106 │     }
 107 │ 
 108 │     try {
 109 │       const response = await fetch(`${this.baseUrl}/auth/me`, {
 110 │         headers: { 'Authorization': `Bearer ${token}` },
 111 │       });
 112 │ 
 113 │       if (!response.ok) {
 114 │         if (response.status === 401) {
 115 │           this.clearTokens();
 116 │           throw new AuthenticationError('Session expired');
 117 │         }
 118 │         throw new AuthenticationError('Failed to get user profile');
 119 │       }
 120 │ 
 121 │       return await response.json();
 122 │     } catch (error) {
 123 │       if (error instanceof AuthenticationError) throw error;
 124 │       throw new AuthenticationError('Network error while fetching user');
 125 │     }
 126 │   }
 127 │ 
 128 │   async refreshToken(): Promise {
 129 │     const refreshToken = this.getRefreshToken();
 130 │     if (!refreshToken) {
 131 │       throw new AuthenticationError('No refresh token');
 132 │     }
 133 │ 
 134 │     try {
 135 │       const response = await fetch(`${this.baseUrl}/auth/refresh`, {
 136 │         method: 'POST',
 137 │         headers: { 'Content-Type': 'application/json' },
 138 │         body: JSON.stringify({ refresh_token: refreshToken }),
 139 │       });
 140 │ 
 141 │       if (!response.ok) {
 142 │         this.clearTokens();
 143 │         throw new AuthenticationError('Failed to refresh token');
 144 │       }
 145 │ 
 146 │       const data = await response.json();
 147 │       this.setTokens(data.access_token, data.refresh_token);
 148 │     } catch (error) {
 149 │       this.clearTokens();
 150 │       if (error instanceof AuthenticationError) throw error;
 151 │       throw new AuthenticationError('Network error during token refresh');
 152 │     }
 153 │   }
 154 │ 
 155 │   // Transform API user profile to AuthUser
 156 │   transformUserProfile(profile: UserProfile): AuthUser {
 157 │     return {
 158 │       id: profile.id,
 159 │       email: profile.email,
 160 │       firstName: profile.first_name,
 161 │       lastName: profile.last_name,
 162 │       role: profile.role,
 163 │       organizationId: profile.organization_id,
 164 │       organizationName: profile.organization_name,
 165 │       organizationRole: profile.organization_role,
 166 │       isEmailVerified: profile.is_email_verified,
 167 │       createdAt: profile.created_at,
 168 │       lastLoginAt: profile.last_login_at,
 169 │     };
 170 │   }
 171 │ }
 172 │ 
 173 │ // Export as default
 174 │ const authService = new AuthService();
 175 │ export default authService;
 176 │ import { User, LoginCredentials, RegisterData } from '@/types/auth';
 177 │ 
 178 │ const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
 179 │ 
 180 │ interface AuthResponse {
 181 │   access_token: string;
 182 │   refresh_token: string;
 183 │   user: User;
 184 │ }
 185 │ 
 186 │ class AuthService {
     ·       ─────┬─────
     ·            ╰── `AuthService` redefined here
 187 │   private accessToken: string | null = null;
 188 │   private refreshToken: string | null = null;
     ╰────

  × the name `authService` is defined multiple times
     ╭─[/home/runner/workspace/frontend/src/lib/auth-service.ts:171:1]
 171 │ }
 172 │ 
 173 │ // Export as default
 174 │ const authService = new AuthService();
     ·       ─────┬─────
     ·            ╰── previous definition of `authService` here
 175 │ export default authService;
 176 │ import { User, LoginCredentials, RegisterData } from '@/types/auth';
 177 │ 
 178 │ const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
 179 │ 
 180 │ interface AuthResponse {
 181 │   access_token: string;
 182 │   refresh_token: string;
 183 │   user: User;
 184 │ }
 185 │ 
 186 │ class AuthService {
 187 │   private accessToken: string | null = null;
 188 │   private refreshToken: string | null = null;
 189 │ 
 190 │   constructor() {
 191 │     if (typeof window !== 'undefined') {
 192 │       this.accessToken = localStorage.getItem('access_token');
 193 │       this.refreshToken = localStorage.getItem('refresh_token');
 194 │     }
 195 │   }
 196 │ 
 197 │   async login(credentials: LoginCredentials): Promise {
 198 │     const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {
 199 │       method: 'POST',
 200 │       headers: {
 201 │         'Content-Type': 'application/json',
 202 │       },
 203 │       body: JSON.stringify(credentials),
 204 │     });
 205 │ 
 206 │     if (!response.ok) {
 207 │       throw new Error('Login failed');
 208 │     }
 209 │ 
 210 │     const data = await response.json();
 211 │     this.setTokens(data.access_token, data.refresh_token);
 212 │     return data;
 213 │   }
 214 │ 
 215 │   async register(userData: RegisterData): Promise {
 216 │     const response = await fetch(`${API_BASE_URL}/api/v1/auth/register`, {
 217 │       method: 'POST',
 218 │       headers: {
 219 │         'Content-Type': 'application/json',
 220 │       },
 221 │       body: JSON.stringify(userData),
 222 │     });
 223 │ 
 224 │     if (!response.ok) {
 225 │       throw new Error('Registration failed');
 226 │     }
 227 │ 
 228 │     const data = await response.json();
 229 │     this.setTokens(data.access_token, data.refresh_token);
 230 │     return data;
 231 │   }
 232 │ 
 233 │   async getCurrentUser(): Promise {
 234 │     if (!this.accessToken) return null;
 235 │ 
 236 │     try {
 237 │       const response = await fetch(`${API_BASE_URL}/api/v1/auth/me`, {
 238 │         headers: {
 239 │           'Authorization': `Bearer ${this.accessToken}`,
 240 │         },
 241 │       });
 242 │ 
 243 │       if (!response.ok) {
 244 │         if (response.status === 401) {
 245 │           await this.refreshAccessToken();
 246 │           return this.getCurrentUser();
 247 │         }
 248 │         throw new Error('Failed to get current user');
 249 │       }
 250 │ 
 251 │       return await response.json();
 252 │     } catch (error) {
 253 │       console.error('Error getting current user:', error);
 254 │       return null;
 255 │     }
 256 │   }
 257 │ 
 258 │   async refreshAccessToken(): Promise {
 259 │     if (!this.refreshToken) return false;
 260 │ 
 261 │     try {
 262 │       const response = await fetch(`${API_BASE_URL}/api/v1/auth/refresh`, {
 263 │         method: 'POST',
 264 │         headers: {
 265 │           'Content-Type': 'application/json',
 266 │         },
 267 │         body: JSON.stringify({ refresh_token: this.refreshToken }),
 268 │       });
 269 │ 
 270 │       if (!response.ok) {
 271 │         this.logout();
 272 │         return false;
 273 │       }
 274 │ 
 275 │       const data = await response.json();
 276 │       this.setTokens(data.access_token, data.refresh_token);
 277 │       return true;
 278 │     } catch (error) {
 279 │       console.error('Error refreshing token:', error);
 280 │       this.logout();
 281 │       return false;
 282 │     }
 283 │   }
 284 │ 
 285 │   logout(): void {
 286 │     this.accessToken = null;
 287 │     this.refreshToken = null;
 288 │     if (typeof window !== 'undefined') {
 289 │       localStorage.removeItem('access_token');
 290 │       localStorage.removeItem('refresh_token');
 291 │     }
 292 │   }
 293 │ 
 294 │   isAuthenticated(): boolean {
 295 │     return !!this.accessToken;
 296 │   }
 297 │ 
 298 │   getAccessToken(): string | null {
 299 │     return this.accessToken;
 300 │   }
 301 │ 
 302 │   private setTokens(accessToken: string, refreshToken: string): void {
 303 │     this.accessToken = accessToken;
 304 │     this.refreshToken = refreshToken;
 305 │     if (typeof window !== 'undefined') {
 306 │       localStorage.setItem('access_token', accessToken);
 307 │       localStorage.setItem('refresh_token', refreshToken);
 308 │     }
 309 │   }
 310 │ }
 311 │ 
 312 │ export const authService = new AuthService();
     ·              ─────┬─────
     ·                   ╰── `authService` redefined here
     ╰────
